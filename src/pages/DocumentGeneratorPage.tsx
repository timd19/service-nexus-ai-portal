
import { useState } from "react";
import { FileText, Send, Plus, Save } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";

interface Document {
  id: number;
  title: string;
  content: string;
  createdAt: Date;
  updatedAt: Date;
}

const DocumentGeneratorPage = () => {
  const [documents, setDocuments] = useState<Document[]>([
    {
      id: 1,
      title: "Cloud Security Best Practices",
      content: "# Cloud Security Best Practices\n\nThis document outlines the best practices for securing cloud infrastructure...\n\n## Access Control\n\n- Implement least privilege access\n- Use multi-factor authentication\n- Regular access reviews\n\n## Network Security\n\n- Implement proper network segmentation\n- Use VPC endpoints where possible\n- Monitor network traffic",
      createdAt: new Date(2025, 4, 2),
      updatedAt: new Date(2025, 4, 2)
    }
  ]);
  const [activeDocument, setActiveDocument] = useState<Document | null>(null);
  const [newTitle, setNewTitle] = useState("");
  const [prompt, setPrompt] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const { toast } = useToast();
  
  const handleNewDocument = () => {
    const newDoc: Document = {
      id: documents.length + 1,
      title: newTitle || "Untitled Document",
      content: "",
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    setDocuments(prev => [...prev, newDoc]);
    setActiveDocument(newDoc);
    setNewTitle("");
    
    toast({
      title: "Document created",
      description: "Your new document has been created successfully."
    });
  };
  
  const handleSaveDocument = () => {
    if (!activeDocument) return;
    
    setIsSaving(true);
    
    // Simulate saving
    setTimeout(() => {
      setDocuments(prev => 
        prev.map(doc => 
          doc.id === activeDocument.id 
            ? { ...activeDocument, updatedAt: new Date() } 
            : doc
        )
      );
      
      setIsSaving(false);
      
      toast({
        title: "Document saved",
        description: "Your document has been saved successfully."
      });
    }, 800);
  };
  
  const handleSendPrompt = async () => {
    if (!prompt.trim() || !activeDocument) return;
    
    // In a real implementation, this would call the Azure OpenAI API
    // For now, we're simulating a response
    const aiResponse = `[AI-generated content based on: "${prompt}"]
    
This is simulated content that would be generated by Azure OpenAI in a real implementation.
The AI would analyze your existing document and prompt to generate appropriate content.

## Key Points
- First important point related to your query
- Second important consideration
- Recommended next steps`;
    
    const updatedContent = activeDocument.content + "\n\n" + aiResponse;
    
    setActiveDocument({
      ...activeDocument,
      content: updatedContent,
      updatedAt: new Date()
    });
    
    setPrompt("");
    
    toast({
      title: "Content generated",
      description: "AI has added content to your document based on your prompt."
    });
  };
  
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold tracking-tight">Document Generator</h1>
        <p className="text-muted-foreground">
          Create and modify service documents with AI assistance
        </p>
      </div>
      
      <Tabs defaultValue="editor">
        <TabsList>
          <TabsTrigger value="editor">Document Editor</TabsTrigger>
          <TabsTrigger value="documents">My Documents</TabsTrigger>
        </TabsList>
        
        <TabsContent value="editor" className="space-y-4">
          {!activeDocument ? (
            <Card>
              <CardHeader>
                <CardTitle>Create New Document</CardTitle>
                <CardDescription>Start by creating a new document</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center gap-2">
                  <Input
                    placeholder="Document Title"
                    value={newTitle}
                    onChange={(e) => setNewTitle(e.target.value)}
                  />
                  <Button 
                    onClick={handleNewDocument}
                    className="bg-nexus-500 hover:bg-nexus-600 whitespace-nowrap"
                  >
                    <Plus className="mr-2 h-4 w-4" /> Create
                  </Button>
                </div>
                
                {documents.length > 0 && (
                  <>
                    <Separator />
                    <div>
                      <h3 className="text-sm font-medium mb-2">Or select an existing document:</h3>
                      <div className="grid gap-2">
                        {documents.map((doc) => (
                          <Button 
                            key={doc.id} 
                            variant="outline" 
                            className="justify-start text-left"
                            onClick={() => setActiveDocument(doc)}
                          >
                            <FileText className="mr-2 h-4 w-4" />
                            {doc.title}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          ) : (
            <>
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold">{activeDocument.title}</h2>
                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline"
                    onClick={() => setActiveDocument(null)}
                  >
                    Close
                  </Button>
                  <Button 
                    onClick={handleSaveDocument} 
                    disabled={isSaving}
                  >
                    <Save className="mr-2 h-4 w-4" />
                    {isSaving ? "Saving..." : "Save"}
                  </Button>
                </div>
              </div>
              
              <Textarea
                className="min-h-[300px] font-mono text-sm"
                value={activeDocument.content}
                onChange={(e) => setActiveDocument({...activeDocument, content: e.target.value})}
                placeholder="Start writing your document content here..."
              />
              
              <Card>
                <CardHeader>
                  <CardTitle className="text-sm">AI Assistant</CardTitle>
                  <CardDescription>
                    Ask the AI to help you with your document
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="E.g., Write a section about network security best practices..."
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                    />
                    <Button 
                      onClick={handleSendPrompt}
                      disabled={!prompt.trim()}
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </>
          )}
        </TabsContent>
        
        <TabsContent value="documents">
          <div className="grid gap-4 md:grid-cols-3">
            {documents.map((doc) => (
              <Card key={doc.id} className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => setActiveDocument(doc)}>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    {doc.title}
                  </CardTitle>
                  <CardDescription>
                    Last updated: {doc.updatedAt.toLocaleDateString()}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground line-clamp-2">
                    {doc.content.substring(0, 100)}...
                  </p>
                </CardContent>
              </Card>
            ))}
            
            <Card className="flex items-center justify-center p-6 border-dashed cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors" onClick={() => setActiveDocument(null)}>
              <div className="text-center">
                <Plus className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                <p className="text-muted-foreground font-medium">Create New Document</p>
              </div>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default DocumentGeneratorPage;
